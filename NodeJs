#!/usr/bin/env groovy

pipeline {
  agent any
  //All parameters which will be used to run the pipeline.
  parameters {
                                string(name: 'DOCKERHUB_URL', defaultValue: 'https://registry.hub.docker.com', description: 'Dockerhub Url')
								string(name: 'DOCKERHUB_CREDETIAL_ID', defaultValue: 'soidjfosftc', description: 'Dockerhub CredentialId')
                                string(name: 'GIT_CREDETIAL_ID', defaultValue: 'pm11prince', description: 'Dockerhub CredentialId')
                                string(name: 'DOCKER_IMAGE_NAME', defaultValue: 'ssdssf/node-base-img', description: 'Docker Image Name')
                                string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Docker Image Tag')
                                string(name: 'GIT_URL', defaultValue: 'https://github.com/pm11prince/code-repo.git', description: 'Git Url')
                                string(name: 'SONARQUBE_URL', defaultValue: 'http://ec2-54-156-240-215.compute-1.amazonaws.com:9000/', description: 'SonarQube Url')
                                string(name: 'SONARQUBE_PROJECT_NAME', defaultValue: 'Node-Project', description: 'SonarQube Project Name')
                                string(name: 'JFROG_USER_NAME', defaultValue: 'sdfs', description: 'JFrog repository user name')
                                string(name: 'JFROG_PASSWORD', defaultValue: 'fdsfs@123', description: 'JFrog repository password')
                                string(name: 'JFROG_URL', defaultValue: 'http://ec2-34-238-216-133.compute-1.amazonaws.com:8081/artifactory/Test-Repo/', description: 'JFrog repository URL')
                                }
  stages {
                
                
  stage('Build image') {
  steps { 
  script {
  try {
        echo "Build image"
                                } catch (e) {
                                                // If there was an exception thrown, the build failed.
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Build image')
                                                cleanup()
                                                throw e
                                                }
                                }
                                }
    }
                
                
                                
                                                
                                //Push the image into Docker hub           
  stage('Push image') {
  steps { 
       script { 
                   try {
                                echo "Push image"
                                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Push image')
                                                cleanup()
                                                throw e
                                                }
                                }
                                }
                                }
                                                
                                
stage('Create Bridge') {
steps { 
 script {
try {
                                                echo "Create Bridge"
                                                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Create Bridge')
                                                cleanup()
                                                throw e
                                                }
                                                }
                                                }
                                
                                }              

                                                  
                                                                
 stage('Checkout code'){
steps { 
 script {
try {
                                                echo "Checkout code"
                                                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Checkout code')
                                                cleanup()
                                                throw e
                                                }
                                                }
                                                }
                                                }
                                                
                                                 
                                                                
 stage('Build NPM'){
steps { 
 script {
try {
                                                echo "Build NPM"
                                                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Build NPM')
                                                cleanup()
                                                throw e
                                                }
                                                }
                                                }
                                                
                }                              
                                                 
                                                                                                 
 stage('Sonar Analysis'){
steps { 
 script {
try {
                echo "Sonar Analysis"
                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Sonar Analysis')
                                                cleanup()
                                                throw e
                                                }
                }
                                                }
                                                }
                                                
                                                
                                                                                                
                                                
                                                
                                                                                 
  stage('Push artifacts to Artifactory'){
  steps { 
  script {
  try {
                                                echo "push to Artifactory"
                                                } catch (e) {
                                                // If there was an exception thrown, the build failed
                                                currentBuild.result = "FAILED"
                                                notifyFailedBuild('Push artifacts to Artifactory')
                                                cleanup()
                                                throw e
                                                }
                                                }
                                                
                                                 }
                                }              
                                                  
                                                
          
         }
  
    }
                
                     

// function to handle the failed build notification.
                                def notifyFailedBuild(String stage) {
                                
                                emailext(
                                  to: emailextrecipients([[$class: 'DevelopersRecipientProvider'],[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider']]),,
                                  subject: "Build Failed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                                  body: "This email is to notify that Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has been failed. Failed stage: [${stage}]"
                                )
                                }
                                
// function to handle successful build notification.
                                def notifySuccessBuild() {
                                
                                emailext(
                                  to: emailextrecipients([[$class: 'DevelopersRecipientProvider'],[$class: 'CulpritsRecipientProvider'],[$class: 'RequesterRecipientProvider']]),,
                                  subject: "Build Success: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                                  body: "This email is to notify that Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' has been completed successfully"
                                )
                                }

//function to clean docker container, volumes and network                        
                                def cleanup() {
                                echo "cleanup"
                                }
